//| mill-version: 1.0.4

import mill.*, scalalib.*
import coursier.MavenRepository
import mill.api.Task.Simple

trait BearlybModule extends ScalaModule:
  final def scalaVersion = "3.7.2"

object bearlyb extends LwjglModule:

  val deps = Seq(
    mvn"com.lihaoyi::os-lib:0.11.4",
    mvn"com.softwaremill.ox::core:0.5.13",
    mvn"io.github.iltotore::iron:3.0.1"
  )
  def moduleDeps = Seq(`bearlyb-vectors`)
  def mvnDeps = super.mvnDeps() ++ deps
  def runMvnDeps = super.runMvnDeps()
  def scalacOptions = Seq(
    "-deprecation",
    "-Wall",
    "-Yexplicit-nulls",
    "-Werror",
    "-new-syntax"
  )

  object test extends ScalaTests with TestModule.Munit:
    def mvnDeps = Seq(
      mvn"org.scalameta::munit:1.0.4",
      mvn"org.scalameta::munit-scalacheck:1.1.0"
    )

end bearlyb

object `bearlyb-vectors` extends BearlybModule:

end `bearlyb-vectors`

object playground extends LwjglModule:
  def mvnDeps = Seq(mvn"com.lihaoyi::os-lib:0.11.4") ++ lwjglDeps
  def moduleDeps = Seq(bearlyb)

trait LwjglModule extends BearlybModule:

  val version = "3.4.0-SNAPSHOT"

  val lwjglLibs = "lwjgl" +: Seq(
    "sdl",
    "stb"
  ).map("lwjgl-" + _)

  val lwjglNatives = Seq(
    "linux",
    "linux-arm64",
    "linux-ppc64le",
    "linux-riscv64",
    "macos-arm64",
    "macos",
    "windows-arm64",
    "windows",
    "freebsd",
  )

  def lwjglDep(lib: String, native: Option[String]): Dep =
    val clf = native match
      case Some(native) => s";classifier=natives-$native"
      case None         => ""

    mvn"org.lwjgl:$lib:$version$clf"
  
  def lwjglSource(lib: String): Dep =
    mvn"org.lwjgl:$lib:$version;classifier=sources"

  def lwjglDocs(lib: String): Dep =
    mvn"org.lwjgl:$lib:$version;classifier=javadoc"

  def lwjglDep(lib: String): Dep = lwjglDep(lib, None)

  val lwjglDeps = lwjglLibs.map(lwjglDep)

  val compileLwjglDeps = lwjglLibs.map(lwjglSource) ++ lwjglLibs.map(lwjglDocs)

  val runLwjglDeps =
    for
      dep <- lwjglLibs
      native <- lwjglNatives
    yield lwjglDep(dep, Some(native))

  def forkArgs =
    if scala.util.Properties.isMac
    then Seq("-XstartOnFirstThread")
    else Seq.empty

  def mvnDeps = lwjglDeps
  def runMvnDeps = runLwjglDeps
  def compileMvnDeps = compileLwjglDeps
  def repositories = Seq(
    // "https://oss.sonatype.org/content/repositories/snapshots/"
    "https://central.sonatype.com/repository/maven-snapshots"
  )

end LwjglModule
