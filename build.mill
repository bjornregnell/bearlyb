//| mill-version: 1.0.4

import mill.*, scalalib.*, publish.*
import coursier.MavenRepository
import mill.api.Task.Simple
import mill.util.Jvm
import mill.util.JarManifest
import os.SubPath

trait BearlybModule extends ScalaModule:
  final def scalaVersion = "3.7.2"

object bearlyb extends LwjglModule, PublishModule:
  def publishVersion = "0.1.1"

  def pomSettings = PomSettings(
    description = "A scala game library",
    organization = "io.github.lego-eden",
    url = "https://github.com/lego-eden/bearlyb",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("lego-eden", "bearlyb"),
    developers = Seq(Developer("lego-eden", "Hampus Edén", "https://github.com/lego-eden"))
  )

  val deps = Seq(
    mvn"com.lihaoyi::os-lib:0.11.4",
    mvn"com.softwaremill.ox::core:0.5.13",
    mvn"io.github.iltotore::iron:3.0.1"
  )
  def moduleDeps = Seq(`bearlyb-vectors`)
  def mvnDeps = super.mvnDeps() ++ deps
  def runMvnDeps = super.runMvnDeps()
  def scalacOptions = Seq(
    "-deprecation",
    "-Wall",
    "-Yexplicit-nulls",
    "-Werror",
    "-new-syntax"
  )

  def bearlybPublishAssembly = Task:
    val base = lwjglAssembly()
    Assembly.create(
      destJar = Task.dest/"out.jar",
      inputPaths = localClasspath().map(_.path),
      manifest = JarManifest.MillDefault.add("Scala-Version" -> scalaVersion()),
      base = Some(base),
    )
  
  def jar = Task:
    val jar = bearlybPublishAssembly()
    jar.pathRef

  object test extends ScalaTests, TestModule.Munit:
    def mvnDeps = Seq(
      mvn"org.scalameta::munit:1.0.4",
      mvn"org.scalameta::munit-scalacheck:1.1.0"
    )

end bearlyb

object `bearlyb-vectors` extends BearlybModule, PublishModule:
  def publishVersion = "0.1.1"

  def pomSettings = PomSettings(
    description = "A library to treat tuples as collections and mathematical vectors",
    organization = "io.github.lego-eden",
    url = "https://github.com/lego-eden/bearlyb",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("lego-eden", "bearlyb"),
    developers = Seq(Developer("lego-eden", "Hampus Edén", "https://github.com/lego-eden"))
  )

end `bearlyb-vectors`

object examples extends BearlybModule:
  def moduleDeps = Seq(bearlyb)

object playground extends LwjglModule:
  def mvnDeps = Seq(mvn"com.lihaoyi::os-lib:0.11.4")
  def moduleDeps = Seq(bearlyb)

trait LwjglModule extends BearlybModule:

  val version = "3.4.0-SNAPSHOT"

  val lwjglLibs = "lwjgl" +: Seq(
    "sdl",
    "stb"
  ).map("lwjgl-" + _)

  val lwjglNatives = Seq(
    "linux",
    "linux-arm64",
    "linux-ppc64le",
    "linux-riscv64",
    "macos-arm64",
    "macos",
    "windows-arm64",
    "windows",
    "freebsd",
  )

  def lwjglDep(lib: String, native: Option[String]): Dep =
    val clf = native match
      case Some(native) => s";classifier=natives-$native"
      case None         => ""

    mvn"org.lwjgl:$lib:$version$clf"
  
  def lwjglSource(lib: String): Dep =
    mvn"org.lwjgl:$lib:$version;classifier=sources"

  def lwjglDocs(lib: String): Dep =
    mvn"org.lwjgl:$lib:$version;classifier=javadoc"

  def lwjglDep(lib: String): Dep = lwjglDep(lib, None)

  def lwjglDeps = Task:
    lwjglLibs.map(lwjglDep)

  def compileLwjglDeps = Task:
    lwjglLibs.map(lwjglSource) ++ lwjglLibs.map(lwjglDocs)

  def runLwjglDeps = Task:
    for
      dep <- lwjglLibs
      native <- lwjglNatives
    yield lwjglDep(dep, Some(native))

  final def resolvedLwjglDeps = Task:
    millResolver().classpath(
      deps = lwjglDeps() ++ runLwjglDeps() ++ compileLwjglDeps(),
      sources = false,
      artifactTypes = Some(artifactTypes()),
    )

  def lwjglAssembly = Task:
    Assembly.create(
      destJar = Task.dest/"out.jar",
      inputPaths = resolvedLwjglDeps().map(_.path),
      manifest = JarManifest.MillDefault.add("Scala-Version" -> scalaVersion()),
      // shader = AssemblyModule.jarjarabramsWorker()
    )

  // def compileMvnDeps = compileLwjglDeps()
  def unmanagedClasspath = Task:
    Seq(lwjglAssembly().pathRef)

  def forkArgs =
    if scala.util.Properties.isMac
    then Seq("-XstartOnFirstThread")
    else Seq.empty

  def repositories = Seq(
    // "https://oss.sonatype.org/content/repositories/snapshots/"
    "https://central.sonatype.com/repository/maven-snapshots"
  )

end LwjglModule
